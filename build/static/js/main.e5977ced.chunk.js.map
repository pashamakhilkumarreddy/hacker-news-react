{"version":3,"sources":["utils/index.js","services/Api.js","selectors/StoryStyles.js","components/Story.js","mappers/index.js","hooks/index.js","constants/index.js","containers/StoriesContainer.js","selectors/StoriesContainerStyles.js","components/Header.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["selectStoryFields","id","by","url","time","title","baseURL","newStoriesURL","storyURL","getStory","storyId","a","axios","get","result","data","story","getStoryIds","then","styled","section","HeaderWrapper","header","FooterWrapper","footer","TimeStamp","h1","div","span","props","color","p","TimeStampGroup","Story","memo","storyID","useState","setStory","renderDateTime","dateTime","Date","checkPropAndRender","prop","useEffect","storyDetails","formattedStory","Object","keys","length","console","log","className","data-testid","src","alt","href","target","rel","timestamp","seconds","Math","floor","interval","mapTime","useInfiniteScroll","loading","setLoading","count","setCount","handleScroll","func","wait","immediate","args","timeout","callNow","clearTimeout","setTimeout","apply","debounce","window","innerHeight","document","documentElement","scrollTop","offsetHeight","addEventListener","removeEventListener","StoriesContainer","storyIDS","setStoryIDS","stories","data-test-id","slice","map","index","key","toString","GlobalStyle","createGlobalStyle","Header","main","role","aria-label","aria-expanded","data-target","aria-hidden","Footer","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e5977ced.chunk.js","sourcesContent":["const selectStoryFields = ({ id, by, url, time, title } = {}) => ({\n  id,\n  by,\n  url, \n  time,\n  title\n});\n\nconst debounce = (func, wait, immediate, args) => {\n  let timeout;\n  return () => {\n    const context = this;\n    const callNow = immediate && !timeout;\n    const later = () => {\n      if (!immediate) func.apply(context, args);\n    };\n\n    clearTimeout(timeout);\n\n    timeout = setTimeout(later, wait);\n\n    if (callNow) func.apply(context, args);\n  }\n}\n\nexport {\n  selectStoryFields,\n  debounce\n}\n","import axios from 'axios';\nimport { selectStoryFields } from '../utils';\n\nexport const baseURL = `https://hacker-news.firebaseio.com/v0/`;\n\nexport const newStoriesURL = `${baseURL}newstories.json`;\n\nexport const storyURL = `${baseURL}item/`;\n\nexport const getStory = async (storyId) => {\n  const result = await axios.get(`${storyURL}${storyId}.json`);\n  const story = await result.data;\n  return (story ? selectStoryFields(story) : {});\n}\n\nexport const getStoryIds = async () => {\n  const result = await axios.get(newStoriesURL).then(({\n    data\n  }) => data);\n  return result;\n}","import styled from 'styled-components';\n\nconst StoryWrapper = styled.section `\n  padding-top: 10px;\n  margin-bottom: 20px;\n  border-top: 1px solid #ccc;\n\n  &:first-of-type {\n    border-top: 0\n  }\n\n  &:last-of-type {\n    margin-bottom: 0;\n    padding-bottom: 0;\n  }\n`;\n\nconst HeaderWrapper = styled.header `\n  border-bottom: 1px solid hsla(0, 0%, 47%, 0.7);\n  box-shadow: 0 2px 4px 0 hsla(0, 0%, 47%, 0.7);\n`;\n\nconst FooterWrapper = styled.footer `\n  position: absolute;\n  bottom: 0;\n  width: 100%;\n  background-color: #fafafa;\n  padding: 2rem 1.5rem;\n  border-top: 1px solid #d7d7d7;\n`;\n\nconst StoryTitle = styled.h1 `\n  margin-bottom: 5px;\n  font-size: 18px;\n  line-height: 1.8;\n  margin: 0;\n  text-decoration: none;\n\n  a {\n    color: #2e2e2c;\n    background-color: #f8dc3d;\n    text-decoration: none;\n  }\n`;\n\nconst StoryMeta = styled.div `\n  font-style: italic;\n\n  > span(:first-child) {\n    margin-right: 10px;\n  }\n\n  > span:not(:first-child):before {\n    content: '.';\n    margin: 0 7px;\n  }\n\n  .story__meta-bold {\n    font-weight: bold;\n  }\n`;\n\nconst StoryMetaElement = styled.span `\n  font-weight: bold;\n  color: ${props => props.color || '#f00'};\n`;\n\nconst TimeStamp = styled.p `\n  font-style: italic;\n  color: ${props => props.color || '#777'};\n`;\n\nconst TimeStampGroup = styled.div `\n  display: flex;\n  flex-flow: row nowrap;\n  \n  > time:first-of-type {\n    padding-right: 1rem;\n  }\n`;\n\nexport {\n  StoryWrapper,\n  HeaderWrapper,\n  FooterWrapper,\n  StoryTitle,\n  StoryMeta,\n  StoryMetaElement,\n  TimeStamp,\n  TimeStampGroup\n}\n","import React, { useEffect, Fragment, useState, memo } from 'react';\nimport { getStory } from '../services/Api';\nimport { mapTime } from '../mappers';\nimport { TimeStamp, TimeStampGroup } from '../selectors/StoryStyles';\n\nconst Story = memo(function ({ storyID  }) {\n  const [story, setStory] = useState({});\n\n  const renderDateTime = (dateTime) => dateTime ? Date(dateTime) : '';\n\n  const checkPropAndRender = (prop) => prop ? prop : '';\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const storyDetails = getStory(storyID);\n        const formattedStory = await storyDetails;\n        if (Object.keys(formattedStory).length && formattedStory.url) {\n          setStory(formattedStory);\n        }\n      } catch (err) {\n        console.log(err);\n        // console.error(err.response.data.err);\n      }\n    })();\n  });\n  return (\n    <Fragment>\n      {\n        Object.keys(story).length ?  (<div className={`box`} data-testid=\"story\">\n            <article className={`media`}>\n              <div className={`media-left`}>\n                <figure className={`image is-64x64`}>\n                  <img src=\"https://bulma.io/images/placeholders/128x128.png\" alt=\"Image\" />\n                </figure>\n              </div>\n            <div className={`media-content`}>\n              <div className={`content`}>\n                <p className={``}>\n                  <strong >\n                    <a href={checkPropAndRender(story.url)} target=\"_blank\" rel=\"noopener noreferrer\">\n                      {checkPropAndRender(story.title)}\n                    </a>\n                  </strong>&nbsp;&nbsp;\n                  { story.by ? <small data-testid=\"story-by\">by: @{checkPropAndRender(story.by)}</small> : null }\n                </p>\n                <TimeStampGroup>\n                  <time dateTime={renderDateTime(story.time)} data-testid=\"story-time\">{renderDateTime(story.time)}</time>\n                  <TimeStamp>\n                    Posted: {mapTime(story.time)} ago\n                  </TimeStamp>\n                </TimeStampGroup>                \n              </div>\n            </div>\n            </article>\n          </div>) : null\n      }\n    </Fragment>\n  );\n})\n\nexport default Story;","const mapTime = (timestamp) => {\n  const seconds = Math.floor((new Date() - timestamp * 1000) / 1000 );\n  let interval = Math.floor(seconds / 3153600);\n  \n  if (interval > 1) {\n    return `${interval} years`;\n  }\n\n  interval = Math.floor(seconds / 3153600);\n\n  if (interval > 1) {\n    return `${interval} months`;\n  }\n\n  interval = Math.floor(seconds / 2592000);\n\n  if (interval > 1) {\n    return `${interval} days`;\n  }\n\n  interval = Math.floor(seconds / 86400);\n\n  if (interval > 1) {\n    return `${interval} days`;\n  }\n\n  interval = Math.floor(seconds / 3600);\n\n  if (interval > 1) {\n    return `${interval} hours`;\n  }\n\n  interval = Math.floor(seconds / 60);\n\n  if (interval > 1) {\n    return `${interval} minutes`;\n  }\n\n  return `${Math.floor(seconds)} seconds`;\n}\n\nexport {\n  mapTime\n}","import {\n  useState,\n  useEffect\n} from 'react';\nimport {\n  MAX_STORIES,\n  STORY_INCREMENT\n} from '../constants';\nimport {\n  debounce\n} from '../utils';\n\nconst useInfiniteScroll = () => {\n  const [loading, setLoading] = useState(false);\n  const [count, setCount] = useState(STORY_INCREMENT);\n\n  const handleScroll = debounce(() => {\n    if (window.innerHeight + document.documentElement.scrollTop !== document.documentElement.offsetHeight || loading) {\n      return false;\n    }\n    setLoading(true);\n  }, 500);\n\n  useEffect(() => {\n    if (!loading) return;\n\n    if (count + STORY_INCREMENT >= MAX_STORIES) {\n      setCount(MAX_STORIES);\n    } else {\n      setCount(count + STORY_INCREMENT);\n    }\n    setLoading(false);\n  }, [loading]);\n\n  useEffect(() => {\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, []);\n\n  return {\n    count\n  };\n}\n\nexport {\n  useInfiniteScroll\n}","export const MAX_STORIES = 500;\nexport const STORY_INCREMENT = 30;","import React, { useState, useEffect, memo } from 'react';\nimport Story from '../components/Story';\nimport { getStoryIds } from '../services/Api';\nimport { useInfiniteScroll } from '../hooks';\n\nconst StoriesContainer = () => {\n  const { count } = useInfiniteScroll();\n  const [ storyIDS, setStoryIDS ] = useState([]);\n\n  useEffect(() => {\n    (async () => {\n      const stories = await getStoryIds();\n      stories && setStoryIDS(stories);\n    })();\n  }, []);\n\n  return (\n    <div className=\"columns is-mobile is-centered mt-3\">\n      <div className={`column is-11-widescreen is-11-desktop is-11-tablet`} data-test-id=\"stories-container\">\n        <h1 className={`title has-text-centered`}>Hacker News Stories</h1>\n        {\n          storyIDS.slice(0, count).map((storyId, index) => <Story key={index.toString()} storyID={storyId} />) \n        }\n      </div>\n    </div>\n  );\n}\n  \nexport default StoriesContainer;\n  ","import styled, {\n  createGlobalStyle\n} from 'styled-components';\n\nconst GlobalStyle = createGlobalStyle `\n  *,\n  *::after,\n  *::before {\n    box-sizing: border-box;\n  }\n\n  body {\n    margin: 0;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n      'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n      sans-serif;\n    font-size: 16px;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    text-rendering: optimizeLegibility;\n    position: relative;\n    min-height: 100vh;\n  }\n`;\n\nconst StoriesContainerWrapper = styled.main `\n  max-width: 1140px;\n  padding: 20px 15px;\n  margin: auto;\n`;\n\nexport {\n  GlobalStyle,\n  StoriesContainerWrapper\n}\n","import React from 'react';\nimport { HeaderWrapper } from '../selectors/StoryStyles';\n\nconst Header = () => {\n  return (\n    <HeaderWrapper>\n      <nav className={`navbar`} role=\"navigation\" aria-label=\"main-navigation\">\n        <div className={`navbar-brand`}>\n          <a href=\"/\">\n            <img className={`header-logo`} src=\"#\" alt=\"Hacker News Logo\" />\n          </a>\n          <a role=\"button\" className={`navbar-burger burger`} aria-label=\"menu\" aria-expanded=\"false\" data-target=\"main-navbar\">\n            <span aria-hidden=\"true\"></span>\n            <span aria-hidden=\"true\"></span>\n            <span aria-hidden=\"true\"></span>\n          </a>\n        </div>\n      </nav>\n    </HeaderWrapper>\n  )\n}\n\nexport default Header;\n","import React, { Fragment } from 'react';\nimport { FooterWrapper } from '../selectors/StoryStyles';\n\nconst Footer = () => {\n  return (\n    <Fragment>\n      <FooterWrapper>\n        <div className={`content has-text-centered`}>\n          <p>\n            <strong>Hacker News</strong>\n          </p>\n        </div>\n      </FooterWrapper>\n    </Fragment>\n  )\n}\n\nexport default Footer;\n","import React, { Fragment } from 'react';\nimport StoriesContainer from './containers/StoriesContainer';\nimport { GlobalStyle } from './selectors/StoriesContainerStyles';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\n\nfunction App() {\n  return (\n    <Fragment>\n      <GlobalStyle />\n      <Header />\n      <main className=\"container\">\n        <StoriesContainer />\n      </main>\n      <Footer />\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '../node_modules/bulma/css/bulma.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}